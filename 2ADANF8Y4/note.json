{
  "paragraphs": [
    {
      "text": "%md \n- Mutable V.S Immutable\n\n```\nimport scala.collection.mutable\nimport scala.collection\nimport scala.collection.immutable (default imported)\n```\n\n1. Collection Trait Graph\n![collection](http://i.stack.imgur.com/bSVyA.png)\n\n2. Immutable Graph\n![immutable](http://i.stack.imgur.com/2fjoA.png)\n\n3. Mutable Graph\n![mutable](http://i.stack.imgur.com/Dsptl.png)\n",
      "config": {
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1422013708736_-70341177",
      "id": "20150123-064828_1076950254",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cul\u003e\n\u003cli\u003eMutable V.S Immutable\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eimport scala.collection.mutable\nimport scala.collection\nimport scala.collection.immutable (default imported)\n\u003c/code\u003e\u003c/pre\u003e\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eCollection Trait Graph\n\u003cbr  /\u003e\u003cimg src\u003d\"http://i.stack.imgur.com/bSVyA.png\" alt\u003d\"collection\" /\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eImmutable Graph\n\u003cbr  /\u003e\u003cimg src\u003d\"http://i.stack.imgur.com/2fjoA.png\" alt\u003d\"immutable\" /\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eMutable Graph\n\u003cbr  /\u003e\u003cimg src\u003d\"http://i.stack.imgur.com/Dsptl.png\" alt\u003d\"mutable\" /\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n"
      },
      "dateCreated": "Jan 23, 2015 6:48:28 AM",
      "dateStarted": "Jan 25, 2015 4:13:51 AM",
      "dateFinished": "Jan 25, 2015 4:13:51 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n- Create Immutable Collection ([Seq](http://docs.scala-lang.org/overviews/collections/seqs.html),[Set](http://docs.scala-lang.org/overviews/collections/sets.html),[Map](http://docs.scala-lang.org/overviews/collections/maps.html),[Common Used Collection](http://docs.scala-lang.org/overviews/collections/concrete-immutable-collection-classes.html))\n\n```\nTraversable()             // An empty traversable object\nList()                    // The empty list\nList(1.0, 2.0)            // A list with elements 1.0, 2.0\nVector(1.0, 2.0)          // A vector with elements 1.0, 2.0\nIterator(1, 2, 3)         // An iterator returning three integers.\nSet(\"dog\", \"cat\", \"bird\") // A set of three animals\nHashSet(\"dog\", \"cat\", \"bird\")   // A hash set of the same animals\nMap(\u0027a\u0027 -\u003e 7, \u0027b\u0027 -\u003e 0)     // A map from characters to integers\n\nval seq \u003d Seq(\"a\", \"b\", \"c\")\nval seq \u003d \"a\" :: \"b\" :: \"c\" :: Nil // Nil a object of List[Nothing]() // Contra-variant \u0026 Co-variant\n```\n\n- Create mutable Collection ([Common Used Collection](http://docs.scala-lang.org/overviews/collections/concrete-mutable-collection-classes.html))\n\n```\nval buf \u003d scala.collection.mutable.ListBuffer.empty[Int] // Invariant\nbuf +\u003d 1\nbuf +\u003d 10\n```\n\n- Array (correspond one-to-one to Java arrays, but with some collection methods) ([Array](http://docs.scala-lang.org/overviews/collections/arrays.html ))\n\n```\nval a1 \u003d Array(1, 2, 3)\na1: Array[Int] \u003d Array(1, 2, 3)\nval a2 \u003d a1 map (_ * 3)\n```\n\n- Loop \u0026 Yield\n\n```\nfor (i \u003c- 1 to 5) yield i // 1, 2, 3, 4, 5\nfor (i \u003c- 1 until 5) yield i // 1, 2, 3, 4\nfor (i \u003c- 1 to 5) yield i % 2\nfor (i \u003c- 0 to 5; // nested loop\n      j \u003c- i to 5)\n    yield Pair(i, j)\n\nval a \u003d Array(1, 2, 3, 4, 5)\n\n// for loop yield over Collection\nfor (e \u003c- a) yield e * 2\n\n// for loop, yield, and guards (for loop \u0027if\u0027 conditions)\nfor (e \u003c- a if e \u003e 2) yield e\n\n// foreach method\na.foreach(mbr \u003d\u003e println(mbr)) // iterate all of the elements in the collection\n\n// while\nvar i \u003d 0\nwhile(i \u003c a.length) {\n    println(a(i))\n    i +\u003d 1\n}\n\n// do .. while\nvar i \u003d 0\ndo {\n    println(a(i))\n    i +\u003d 1\n} while (i \u003c a.length)\n\n// Create a new Collection\nval transformed \u003d a.map(_ + 20) // _ + 20 is a anonymous function\n\n// Filter\nval result \u003d a.filter((i: Int) \u003d\u003e i % 2 \u003d 0) \nval result \u003d a.filter(_ % 2 \u003d\u003d 0)\n\n// zip\nList(1, 2, 3).zip(List(\"a\", \"b\", \"c\")).map { case (a, b) \u003d\u003e // partitial function\n    b + a\n}\n\nval (odds, evens) \u003d Array(1,2,3,4,5,6,7).partition(_ % 2 \u003d\u003d 1)\n\n// find\nArray(1,2,3,4,5).find(_ \u003e 3) // Some(4)\n\n// exists\nArray(1,2,3,4,5).exists(_ \u003e 3) // true\n\n// drop\nArray(1,2,3,4,5,6,7,8,9).drop(5)\n\n// dropWhile\nArray(1,2,3,4,5,6,7,8,9).dropWhile(_ % 2 \u003d\u003d 0)\n\n// foldLeft\nArray(1,2,3,4,5,6,7,8,9).foldLeft(0) { (sum: Int, e: Int) \u003d\u003e println(s\"sum:$sum e:$e\"); sum + e }\n\n// foldRight\nArray(1,2,3,4,5,6,7,8,9).foldRight(0) { (e: Int, sum: Int) \u003d\u003eprintln(s\"sum:$sum e:$e\"); sum + e }\n\n// flatten\nList(List(1, 2), List(3, 4)).flatten\n\n// flatMap\nList(List(1, 2), List(3, 4)).flatMap(x \u003d\u003e x.map(_ * 2))\n\n// collect\nval mixedList \u003d List(\"a\", 1, 2, \"b\", 19, 42.0) //this is a List[Any]\nval results \u003d mixedList collect {\n  case s: String \u003d\u003e \"String:\" + s\n  case i: Int \u003d\u003e \"Int:\" + i.toString \n  // 42.0 doesn\u0027t match any of the partial function, will be ignored\n}\n\n```",
      "config": {
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1422177066581_1413182501",
      "id": "20150125-041106_1581264277",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cul\u003e\n\u003cli\u003eCreate Immutable Collection (\u003ca href\u003d\"http://docs.scala-lang.org/overviews/collections/seqs.html\"\u003eSeq\u003c/a\u003e,\u003ca href\u003d\"http://docs.scala-lang.org/overviews/collections/sets.html\"\u003eSet\u003c/a\u003e,\u003ca href\u003d\"http://docs.scala-lang.org/overviews/collections/maps.html\"\u003eMap\u003c/a\u003e,\u003ca href\u003d\"http://docs.scala-lang.org/overviews/collections/concrete-immutable-collection-classes.html\"\u003eCommon Used Collection\u003c/a\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eTraversable()             // An empty traversable object\nList()                    // The empty list\nList(1.0, 2.0)            // A list with elements 1.0, 2.0\nVector(1.0, 2.0)          // A vector with elements 1.0, 2.0\nIterator(1, 2, 3)         // An iterator returning three integers.\nSet(\"dog\", \"cat\", \"bird\") // A set of three animals\nHashSet(\"dog\", \"cat\", \"bird\")   // A hash set of the same animals\nMap(\u0027a\u0027 -\u0026gt; 7, \u0027b\u0027 -\u0026gt; 0)     // A map from characters to integers\n\nval seq \u003d Seq(\"a\", \"b\", \"c\")\nval seq \u003d \"a\" :: \"b\" :: \"c\" :: Nil // Nil a object of List[Nothing]() // Contra-variant \u0026amp; Co-variant\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eCreate mutable Collection (\u003ca href\u003d\"http://docs.scala-lang.org/overviews/collections/concrete-mutable-collection-classes.html\"\u003eCommon Used Collection\u003c/a\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eval buf \u003d scala.collection.mutable.ListBuffer.empty[Int] // Invariant\nbuf +\u003d 1\nbuf +\u003d 10\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eArray (correspond one-to-one to Java arrays, but with some collection methods) (\u003ca href\u003d\"http://docs.scala-lang.org/overviews/collections/arrays.html\"\u003eArray\u003c/a\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eval a1 \u003d Array(1, 2, 3)\na1: Array[Int] \u003d Array(1, 2, 3)\nval a2 \u003d a1 map (_ * 3)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eLoop \u0026amp; Yield\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003efor (i \u0026lt;- 1 to 5) yield i // 1, 2, 3, 4, 5\nfor (i \u0026lt;- 1 until 5) yield i // 1, 2, 3, 4\nfor (i \u0026lt;- 1 to 5) yield i % 2\nfor (i \u0026lt;- 0 to 5; // nested loop\n      j \u0026lt;- i to 5)\n    yield Pair(i, j)\n\nval a \u003d Array(1, 2, 3, 4, 5)\n\n// for loop yield over Collection\nfor (e \u0026lt;- a) yield e * 2\n\n// for loop, yield, and guards (for loop \u0027if\u0027 conditions)\nfor (e \u0026lt;- a if e \u0026gt; 2) yield e\n\n// foreach method\na.foreach(mbr \u003d\u0026gt; println(mbr)) // iterate all of the elements in the collection\n\n// while\nvar i \u003d 0\nwhile(i \u0026lt; a.length) {\n    println(a(i))\n    i +\u003d 1\n}\n\n// do .. while\nvar i \u003d 0\ndo {\n    println(a(i))\n    i +\u003d 1\n} while (i \u0026lt; a.length)\n\n// Create a new Collection\nval transformed \u003d a.map(_ + 20) // _ + 20 is a anonymous function\n\n// Filter\nval result \u003d a.filter((i: Int) \u003d\u0026gt; i % 2 \u003d 0) \nval result \u003d a.filter(_ % 2 \u003d\u003d 0)\n\n// zip\nList(1, 2, 3).zip(List(\"a\", \"b\", \"c\")).map { case (a, b) \u003d\u0026gt; // partitial function\n    b + a\n}\n\nval (odds, evens) \u003d Array(1,2,3,4,5,6,7).partition(_ % 2 \u003d\u003d 1)\n\n// find\nArray(1,2,3,4,5).find(_ \u0026gt; 3) // Some(4)\n\n// exists\nArray(1,2,3,4,5).exists(_ \u0026gt; 3) // true\n\n// drop\nArray(1,2,3,4,5,6,7,8,9).drop(5)\n\n// dropWhile\nArray(1,2,3,4,5,6,7,8,9).dropWhile(_ % 2 \u003d\u003d 0)\n\n// foldLeft\nArray(1,2,3,4,5,6,7,8,9).foldLeft(0) { (sum: Int, e: Int) \u003d\u0026gt; println(s\"sum:$sum e:$e\"); sum + e }\n\n// foldRight\nArray(1,2,3,4,5,6,7,8,9).foldRight(0) { (e: Int, sum: Int) \u003d\u0026gt;println(s\"sum:$sum e:$e\"); sum + e }\n\n// flatten\nList(List(1, 2), List(3, 4)).flatten\n\n// flatMap\nList(List(1, 2), List(3, 4)).flatMap(x \u003d\u0026gt; x.map(_ * 2))\n\n// collect\nval mixedList \u003d List(\"a\", 1, 2, \"b\", 19, 42.0) //this is a List[Any]\nval results \u003d mixedList collect {\n  case s: String \u003d\u0026gt; \"String:\" + s\n  case i: Int \u003d\u0026gt; \"Int:\" + i.toString \n  // 42.0 doesn\u0027t match any of the partial function, will be ignored\n}\n\u003c/code\u003e\u003c/pre\u003e\n"
      },
      "dateCreated": "Jan 25, 2015 4:11:06 AM",
      "dateStarted": "Jan 25, 2015 5:06:41 AM",
      "dateFinished": "Jan 25, 2015 5:06:41 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n- Views\n\nIt\u0027s used for lazy computing (Performance V.S Modular)\n\n```\nval v \u003d Vector(1,2,3,4)\nv map(_ + 1)\n\nval vv \u003d v.view map(_ + 1)\nvv.force\n```\n\nAnother Example\n\n```\n// assume we have a predefined function and we can not change it\ndef exists(dates: Seq[java.util.Date], lucky: java.util.Date) \u003d dates.exists(_ \u003d\u003d lucky) \n\n// and we have a very long time sequence, but in Long type\nscala\u003e val dates \u003d Seq(1019299l, 923939l, 2929391l)\n\n// How can we reuse the predefined function and with less performance penalty?\nval vdates \u003d dates.view.map(new java.util.Date(_))\n\nexists(vdates, new java.util.Date(1019299))\n```",
      "config": {
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1422178054519_-428429359",
      "id": "20150125-042734_1832622631",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cul\u003e\n\u003cli\u003eViews\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt\u0027s used for lazy computing (Performance V.S Modular)\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eval v \u003d Vector(1,2,3,4)\nv map(_ + 1)\n\nval vv \u003d v.view map(_ + 1)\nvv.force\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnother Example\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// assume we have a predefined function and we can not change it\ndef exists(dates: Seq[java.util.Date], lucky: java.util.Date) \u003d dates.exists(_ \u003d\u003d lucky) \n\n// and we have a very long time sequence, but in Long type\nscala\u0026gt; val dates \u003d Seq(1019299l, 923939l, 2929391l)\n\n// How can we reuse the predefined function and with less performance penalty?\nval vdates \u003d dates.view.map(new java.util.Date(_))\n\nexists(vdates, new java.util.Date(1019299))\n\u003c/code\u003e\u003c/pre\u003e\n"
      },
      "dateCreated": "Jan 25, 2015 4:27:34 AM",
      "dateStarted": "Jan 25, 2015 4:32:31 AM",
      "dateFinished": "Jan 25, 2015 4:32:31 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n- Iterators\n\nIterator Definition\n\n```\nabstract class Iterator[+A] {\n  def hasNext: Boolean\n  def next: A\n}\n\n// how we iterate the iterator\nwhile (it.hasNext) \n  println(it.next())\n\n```\n\nMore Examples\n\n```\nval it \u003d Iterator(\"a\", \"b\", \"c\")\nval it1 \u003d Iterator(\"a\", \"b\", \"c\")\nval it2 \u003d Iterator(1, 2, 3)\nval it \u003d it1 ++ it2\nit.foreach(println)\n\nval it3 \u003d Iterator(4,5,6)\nval (it1, it2) \u003d it3.duplicate // it3 is invalid\nit1.foreach(println)\nit2.foreach(println)\n```",
      "config": {
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1422178308248_633830061",
      "id": "20150125-043148_330839598",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cul\u003e\n\u003cli\u003eIterators\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIterator Definition\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eabstract class Iterator[+A] {\n  def hasNext: Boolean\n  def next: A\n}\n\n// how we iterate the iterator\nwhile (it.hasNext) \n  println(it.next())\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMore Examples\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eval it \u003d Iterator(\"a\", \"b\", \"c\")\nval it1 \u003d Iterator(\"a\", \"b\", \"c\")\nval it2 \u003d Iterator(1, 2, 3)\nval it \u003d it1 ++ it2\nit.foreach(println)\n\nval it3 \u003d Iterator(4,5,6)\nval (it1, it2) \u003d it3.duplicate // it3 is invalid\nit1.foreach(println)\nit2.foreach(println)\n\u003c/code\u003e\u003c/pre\u003e\n"
      },
      "dateCreated": "Jan 25, 2015 4:31:48 AM",
      "dateStarted": "Jan 25, 2015 4:33:54 AM",
      "dateFinished": "Jan 25, 2015 4:33:54 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n- Java \u0026 Scala Collection\n\n```\nimport collection.JavaConversions._ // implicit function\n\nscala.collection.Seq         \u003d\u003e java.util.List\nscala.collection.mutable.Seq \u003d\u003e java.util.List\nscala.collection.Set         \u003d\u003e java.util.Set\nscala.collection.Map         \u003d\u003e java.util.Map\njava.util.Properties         \u003d\u003e scala.collection.mutable.Map[String, String]\n\nIterator               \u003c\u003d\u003e     java.util.Iterator\nIterator               \u003c\u003d\u003e     java.util.Enumeration\nIterable               \u003c\u003d\u003e     java.lang.Iterable\nIterable               \u003c\u003d\u003e     java.util.Collection\nmutable.Buffer         \u003c\u003d\u003e     java.util.List\nmutable.Set            \u003c\u003d\u003e     java.util.Set\nmutable.Map            \u003c\u003d\u003e     java.util.Map\nmutable.ConcurrentMap  \u003c\u003d\u003e     java.util.concurrent.ConcurrentMap\n\n\nval a \u003d Seq(1,2,3,4,5) // a: Seq[Int] \u003d List(1, 2, 3, 4, 5)\nval b: java.util.List[Int] \u003d a // b: java.util.List[Int] \u003d [1, 2, 3, 4, 5]\n\n\n```",
      "config": {
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1422178434887_-1834385563",
      "id": "20150125-043354_319796635",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cul\u003e\n\u003cli\u003eJava \u0026amp; Scala Collection\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eimport collection.JavaConversions._ // implicit function\n\nscala.collection.Seq         \u003d\u0026gt; java.util.List\nscala.collection.mutable.Seq \u003d\u0026gt; java.util.List\nscala.collection.Set         \u003d\u0026gt; java.util.Set\nscala.collection.Map         \u003d\u0026gt; java.util.Map\njava.util.Properties         \u003d\u0026gt; scala.collection.mutable.Map[String, String]\n\nIterator               \u0026lt;\u003d\u0026gt;     java.util.Iterator\nIterator               \u0026lt;\u003d\u0026gt;     java.util.Enumeration\nIterable               \u0026lt;\u003d\u0026gt;     java.lang.Iterable\nIterable               \u0026lt;\u003d\u0026gt;     java.util.Collection\nmutable.Buffer         \u0026lt;\u003d\u0026gt;     java.util.List\nmutable.Set            \u0026lt;\u003d\u0026gt;     java.util.Set\nmutable.Map            \u0026lt;\u003d\u0026gt;     java.util.Map\nmutable.ConcurrentMap  \u0026lt;\u003d\u0026gt;     java.util.concurrent.ConcurrentMap\n\n\nval a \u003d Seq(1,2,3,4,5) // a: Seq[Int] \u003d List(1, 2, 3, 4, 5)\nval b: java.util.List[Int] \u003d a // b: java.util.List[Int] \u003d [1, 2, 3, 4, 5]\n\u003c/code\u003e\u003c/pre\u003e\n"
      },
      "dateCreated": "Jan 25, 2015 4:33:54 AM",
      "dateStarted": "Jan 25, 2015 5:09:38 AM",
      "dateFinished": "Jan 25, 2015 5:09:38 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n- Option\n\n```\ntrait Option[T] {\n  def isDefined: Boolean\n  def get: T\n  def getOrElse(t: T): T\n}\n\n// Option has 2 subclasses Some[T] \u0026 None \n\nval numbers \u003d Map(1 -\u003e \"one\", 2 -\u003e \"two\")\nnumbers.get(2) // Some(\"two\")\nnumbers.get(3) // None\n\nval m \u003d Map(2 -\u003e \"Two\", 1 -\u003e \"One\")\nval result \u003d m.getOrElse(1, \"Unknow\")\n  \nval m2 \u003d new collection.mutable.HashMap[Int, String]()\nm2.getOrElseUpdate(1, \"One\")\nm2.getOrElseUpdate(2, \"Two\")\n\nprintln(m2(1))\n\n\nArray(Option(1), None, Option(2), Option(3), None).collect {\n  case Some(i) \u003d\u003e i\n  case None \u003d\u003e -1\n}\n\n```",
      "config": {
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1422180477464_764755769",
      "id": "20150125-050757_1970854402",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cul\u003e\n\u003cli\u003eOption\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003etrait Option[T] {\n  def isDefined: Boolean\n  def get: T\n  def getOrElse(t: T): T\n}\n\n// Option has 2 subclasses Some[T] \u0026amp; None \n\nval numbers \u003d Map(1 -\u0026gt; \"one\", 2 -\u0026gt; \"two\")\nnumbers.get(2) // Some(\"two\")\nnumbers.get(3) // None\n\nval m \u003d Map(2 -\u0026gt; \"Two\", 1 -\u0026gt; \"One\")\nval result \u003d m.getOrElse(1, \"Unknow\")\n\nval m2 \u003d new collection.mutable.HashMap[Int, String]()\nm2.getOrElseUpdate(1, \"One\")\nm2.getOrElseUpdate(2, \"Two\")\n\nprintln(m2(1))\n\n\nArray(Option(1), None, Option(2), Option(3), None).collect {\n  case Some(i) \u003d\u0026gt; i\n  case None \u003d\u0026gt; -1\n}\n\u003c/code\u003e\u003c/pre\u003e\n"
      },
      "dateCreated": "Jan 25, 2015 5:07:57 AM",
      "dateStarted": "Jan 25, 2015 5:16:41 AM",
      "dateFinished": "Jan 25, 2015 5:16:41 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n- Tuple\n\nTuple is a trait with sub trait (Tuple1, Tuple2 ... Tuple22)\n\n```\nval stuff \u003d (42, \"fish\") // stuff: (Int, String) \u003d (42,fish)\nprintln(stuff._1) // 42\nprintln(stuff._2) // fish\nval stuff3 \u003d (54, 21.3, \"fish\") // stuff3: (Int, Double, String) \u003d (54,21.3,fish)\ndef getStuff \u003d stuff3 // def getStuff: (Int, Double, String)\nval (v1, _, v3) \u003d getStuff // v1: Int \u003d 54 \u0026 v3: String \u003d fish\n\n```",
      "config": {
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1422181001709_631780434",
      "id": "20150125-051641_775237509",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cul\u003e\n\u003cli\u003eTuple\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTuple is a trait with sub trait (Tuple1, Tuple2 \u0026hellip; Tuple22)\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eval stuff \u003d (42, \"fish\") // stuff: (Int, String) \u003d (42,fish)\nprintln(stuff._1) // 42\nprintln(stuff._2) // fish\nval stuff3 \u003d (54, 21.3, \"fish\") // stuff3: (Int, Double, String) \u003d (54,21.3,fish)\ndef getStuff \u003d stuff3 // def getStuff: (Int, Double, String)\nval (v1, _, v3) \u003d getStuff // v1: Int \u003d 54 \u0026amp; v3: String \u003d fish\n\u003c/code\u003e\u003c/pre\u003e\n"
      },
      "dateCreated": "Jan 25, 2015 5:16:41 AM",
      "dateStarted": "Jan 25, 2015 5:21:04 AM",
      "dateFinished": "Jan 25, 2015 5:21:04 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n- Product\n\nProduct is a trait with sub trait (Product1, Product2 ... Product22)\n\n```\ntrait Product extends Any with Equals {\n  def productElement(n: Int): Any\n\n  /** The size of this product   */\n  def productArity: Int\n\n  /** An iterator over all the elements of this product.   */\n  def productIterator: Iterator[Any] \u003d new scala.collection.AbstractIterator[Any]\n}\n\ntrait RecordType {\n  self: Product \u003d\u003e\n  def records: String \u003d (\n    self.productIterator.map({ arg \u003d\u003e\n      arg.getClass.getSimpleName + \":\" + arg\n    }).toSeq.mkString(\"\\n\"))\n}\ncase class X(i: Int, c: Char, s: String) extends RecordType\n\nval x \u003d X(5, \u0027d\u0027, \"test\")\nprintln(x.records)\n```",
      "config": {
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1422181185114_1190480165",
      "id": "20150125-051945_2006248882",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cul\u003e\n\u003cli\u003eProduct\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eProduct is a trait with sub trait (Product1, Product2 \u0026hellip; Product22)\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etrait Product extends Any with Equals {\n  def productElement(n: Int): Any\n\n  /** The size of this product   */\n  def productArity: Int\n\n  /** An iterator over all the elements of this product.   */\n  def productIterator: Iterator[Any] \u003d new scala.collection.AbstractIterator[Any]\n}\n\ntrait RecordType {\n  self: Product \u003d\u0026gt;\n  def records: String \u003d (\n    self.productIterator.map({ arg \u003d\u0026gt;\n      arg.getClass.getSimpleName + \":\" + arg\n    }).toSeq.mkString(\"\\n\"))\n}\ncase class X(i: Int, c: Char, s: String) extends RecordType\n\nval x \u003d X(5, \u0027d\u0027, \"test\")\nprintln(x.records)\n\u003c/code\u003e\u003c/pre\u003e\n"
      },
      "dateCreated": "Jan 25, 2015 5:19:45 AM",
      "dateStarted": "Jan 25, 2015 5:22:46 AM",
      "dateFinished": "Jan 25, 2015 5:22:46 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1422181258732_2102643186",
      "id": "20150125-052058_911377182",
      "dateCreated": "Jan 25, 2015 5:20:58 AM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Collections",
  "id": "2ADANF8Y4"
}